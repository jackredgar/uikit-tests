// Generated by Selenium IDE
const { Builder, By, Key, until, ExpectedConditions } = require('selenium-webdriver')
const assert = require('assert')
const { NoSuchElementError } = require('selenium-webdriver/lib/error')

describe('Text Input Preformatted', function() {
  this.timeout(30000)
  let driver
  let vars

  let savedCookies = null;

  async function goToLSG(driver, componentURL) {
    await driver.get("https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/")
    driver.manage().window().maximize();
    if (savedCookies != null) {
      for (let i = 0; i < savedCookies.length; i++) {
        // console.log("individual cookie", savedCookies[i])
        await driver.manage().addCookie(savedCookies[i]);
      }
      await driver.navigate().to(componentURL);
    } else {
      await driver.findElement(By.css("#Input_UsernameVal")).click()
      await driver.findElement(By.css("#Input_UsernameVal")).sendKeys("LSG_Dev")
      await driver.findElement(By.css("#Input_PasswordVal")).click()
      await driver.findElement(By.css("#Input_PasswordVal")).sendKeys("pwd123")
      await driver.findElement(By.xpath("//*[@id='b6-Button']/button")).click()
      await driver.findElement(By.xpath("//*[@id='b2-Content']/h1/div[2]/span"))
      await driver.manage().getCookies().then(function(cookies) {
        // console.log('cookie details => ', cookies);
        savedCookies = cookies; 
      });
      await driver.navigate().to(componentURL);
    }
  }

  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })

  it('CheckPrefixSuffix', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=7&MenuSubCategorId=29");

    const prefixText = await driver.findElement(By.css("span.preformatted-input-prefix")).getText()
    assert.equal(prefixText, "https//:")

    const suffixText = await driver.findElement(By.css("span.preformatted-input-suffix")).getText()
    assert.equal(suffixText, "@whatever.com")
  })

  it('TypeText', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=7&MenuSubCategorId=29");

    await driver.findElement(By.css(".preformatted-text input")).sendKeys(Key.CONTROL, "a")
    await driver.findElement(By.css(".preformatted-text input")).sendKeys(Key.DELETE)

    await driver.findElement(By.css(".preformatted-text input")).sendKeys("google")
    const inputVal = await driver.findElement(By.css(".preformatted-hiddenText")).getAttribute("innerHTML")
    assert.equal(inputVal, "google")
  })

  it('CheckErrorText', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=7&MenuSubCategorId=29");

    await driver.findElement(By.xpath("//*[contains(text(), 'Validation')]/parent::div/span/input[contains(@class, 'switch')]")).click()
    await driver.findElement(By.xpath("//*[contains(text(), 'Generic error message')]"))
  })
  
})


