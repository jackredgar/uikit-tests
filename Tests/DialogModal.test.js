// Generated by Selenium IDE
import { Builder, By } from 'selenium-webdriver'
import { strict as assert } from 'assert';
import 'dotenv/config'
import { goToLSG } from '../utilities.js'

describe('Dialog Modal', function() {
  this.timeout(30000)
  let driver
  let vars

  let env = process.env.ENVIRONMENT
  let Component_URL = env == "QA" ? "https://axosbank-qa-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=92" : "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=92"

  let savedCookies = null;

  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })

  it('OpenClose', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    savedCookies = await goToLSG(driver, Component_URL, savedCookies);

    await driver.findElement(By.xpath("//*[contains(text(), 'Open Popup - Text')]")).click()
    await driver.findElement(By.css('.popup-backdrop > .popup-dialog'))
    await driver.findElement(By.css(".popup-backdrop > .popup-dialog button")).click()
    let isModalShown = true; 
    try {
      await driver.findElement(By.css('.popup-backdrop > .popup-dialog'))
    } catch (e) {
      if (e.name == "NoSuchElementError") {
        isModalShown = false;
      }
    }
    assert.equal(isModalShown, false)
  })

  it('OpenClickBackdrop', async function() {
    await driver.manage().setTimeouts({ implicit: 5000 });
    savedCookies = await goToLSG(driver, Component_URL, savedCookies);

    await driver.findElement(By.xpath("//*[contains(text(), 'Open Popup - Text')]")).click()
    await driver.findElement(By.css('.popup-backdrop > .popup-dialog'))
    await driver.findElement(By.css(".popup-backdrop")).click()
    let isModalShown = true; 
    try {
      await driver.findElement(By.css('.popup-backdrop > .popup-dialog'))
    } catch (e) {
      if (e.name == "NoSuchElementError") {
        isModalShown = false;
      }
    }
    assert.equal(isModalShown, true)
  })
})


