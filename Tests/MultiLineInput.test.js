// Generated by Selenium IDE
import { Builder, By } from 'selenium-webdriver'
import { strict as assert } from 'assert';
import 'dotenv/config'
import { goToLSG } from '../utilities.js'

describe('MultiLine Input', function() {
  this.timeout(30000)
  let driver
  let vars

  let env = process.env.ENVIRONMENT
  let Component_URL = env == "QA" ? "https://axosbank-qa-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=77" : "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=77"

  let savedCookies = null;

  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('ClickType', async function() {
    await driver.manage().setTimeouts({ implicit: 10000 });
    savedCookies = await goToLSG(driver, Component_URL, savedCookies);

    await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).click()
    await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).sendKeys("hello there")
    const inputValue = await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).getAttribute("value")
    assert.equal(inputValue, 'hello there')
  })

  it('AssertDisabled', async function() {
    await driver.manage().setTimeouts({ implicit: 10000 });
    savedCookies = await goToLSG(driver, Component_URL, savedCookies);
    await driver.findElement(By.xpath('//label[contains(text(), "Enabled")]/parent::div/span/input')).click()
    await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea'))
    const disabledValue = await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).getAttribute("disabled")
    assert.equal('true', disabledValue)
  })

  it('AssertRequired', async function() {
    await driver.manage().setTimeouts({ implicit: 10000 });
    savedCookies = await goToLSG(driver, Component_URL, savedCookies);
    await driver.findElement(By.xpath('//label[contains(text(), "Mandatory Input")]/parent::div/span/input')).click()
    await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea'))
    const disabledValue = await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).getAttribute("required")
    assert.equal('true', disabledValue)

    await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).click()
    await driver.findElement(By.css('div.pattern-preview-header')).click()
    const errorShown = await driver.findElement(By.xpath('//span[contains(text(), "Input Must Be Filled")]')).isDisplayed()
    assert.equal(true, errorShown)
  })

  it('AssertRegex', async function() {
    await driver.manage().setTimeouts({ implicit: 10000 });
    savedCookies = await goToLSG(driver, Component_URL, savedCookies);
    await driver.findElement(By.xpath('//label[contains(text(), "Mandatory Input")]/parent::div/span/input')).click()

    await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).click()
    await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).sendKeys("Test123")
    const inputValue = await driver.findElement(By.css('div[data-block="CustomPatterns.MultiLineTextInput"] textarea')).getAttribute("value")
    assert.equal(inputValue, 'Test123')

    const errorShown = await driver.findElement(By.xpath('//span[contains(text(), "Numbers not allowed")]')).isDisplayed()
    assert.equal(true, errorShown)
  })
})


