// Generated by Selenium IDE
const { Builder, By, Key, until, ExpectedConditions } = require('selenium-webdriver')
const assert = require('assert')
const { NoSuchElementError } = require('selenium-webdriver/lib/error')

describe('Create Password', function() {
  this.timeout(30000)
  let driver
  let vars

  let savedCookies = null;

  async function goToLSG(driver, componentURL) {
    await driver.get("https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/")
    driver.manage().window().maximize();
    if (savedCookies != null) {
      for (let i = 0; i < savedCookies.length; i++) {
        // console.log("individual cookie", savedCookies[i])
        await driver.manage().addCookie(savedCookies[i]);
      }
      await driver.navigate().to(componentURL);
    } else {
      await driver.findElement(By.css("#Input_UsernameVal")).click()
      await driver.findElement(By.css("#Input_UsernameVal")).sendKeys("LSG_Dev")
      await driver.findElement(By.css("#Input_PasswordVal")).click()
      await driver.findElement(By.css("#Input_PasswordVal")).sendKeys("pwd123")
      await driver.findElement(By.xpath("//*[@id='b6-Button']/button")).click()
      await driver.findElement(By.xpath("//*[@id='b2-Content']/h1/div[2]/span"))
      await driver.manage().getCookies().then(function(cookies) {
        // console.log('cookie details => ', cookies);
        savedCookies = cookies; 
      });
      await driver.navigate().to(componentURL);
    }
  }

  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })

  it('TypeUppercase', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=90");

    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).click()
    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).sendKeys("E")
    let conditionValid = false;
    let criteriaClasses = await driver.findElement(By.xpath('//div[contains(text(), "One uppercase letter")]/i')).getAttribute("class")
    criteriaClasses = criteriaClasses.split(" ")
    for (let i = 0; i < criteriaClasses.length; i++) {
      console.log(criteriaClasses[i])
      if (criteriaClasses[i] == "password-condition-valid") {
        conditionValid = true;
        break;
      }
    }
    assert.equal(true, conditionValid)
  })

  it('TypeLowercase', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=90");

    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).click()
    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).sendKeys("e")
    let conditionValid = false;
    let criteriaClasses = await driver.findElement(By.xpath('//div[contains(text(), "One lowercase letter")]/i')).getAttribute("class")
    criteriaClasses = criteriaClasses.split(" ")
    for (let i = 0; i < criteriaClasses.length; i++) {
      console.log(criteriaClasses[i])
      if (criteriaClasses[i] == "password-condition-valid") {
        conditionValid = true;
        break;
      }
    }
    assert.equal(true, conditionValid)
  })

  it('TypeNumber', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=90");

    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).click()
    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).sendKeys("3")
    let conditionValid = false;
    let criteriaClasses = await driver.findElement(By.xpath('//div[contains(text(), "One number")]/i')).getAttribute("class")
    criteriaClasses = criteriaClasses.split(" ")
    for (let i = 0; i < criteriaClasses.length; i++) {
      console.log(criteriaClasses[i])
      if (criteriaClasses[i] == "password-condition-valid") {
        conditionValid = true;
        break;
      }
    }
    assert.equal(true, conditionValid)
  })

  it('TypeSymbol', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=90");

    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).click()
    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).sendKeys("!")
    let conditionValid = false;
    let criteriaClasses = await driver.findElement(By.xpath('//div[contains(text(), "One valid symbol (#?!@$%^&*+-)")]/i')).getAttribute("class")
    criteriaClasses = criteriaClasses.split(" ")
    for (let i = 0; i < criteriaClasses.length; i++) {
      console.log(criteriaClasses[i])
      if (criteriaClasses[i] == "password-condition-valid") {
        conditionValid = true;
        break;
      }
    }
    assert.equal(true, conditionValid)
  })

  it('TypeMinChars', async function() {
    await driver.manage().setTimeouts({ implicit: 2000 });
    await goToLSG(driver, "https://axosbank-dev-sentry.outsystemsenterprise.com/AXOS_Reactive_LSG/PatternDetail?MenuCategoryId=8&MenuSubCategorId=90");

    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).click()
    await driver.findElement(By.css("div[data-block='CustomPatterns.PasswordCreate'] input")).sendKeys("atleasteight")
    let conditionValid = false;
    let criteriaClasses = await driver.findElement(By.xpath('//span[contains(text(), "8-32 characters")]/parent::div/i')).getAttribute("class")
    criteriaClasses = criteriaClasses.split(" ")
    for (let i = 0; i < criteriaClasses.length; i++) {
      console.log(criteriaClasses[i])
      if (criteriaClasses[i] == "password-condition-valid") {
        conditionValid = true;
        break;
      }
    }
    assert.equal(true, conditionValid)
  })

})


